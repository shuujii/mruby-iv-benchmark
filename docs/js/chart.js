(function(){"use strict";const Y_LINE_WIDTH=2;const AXIS_WIDTH=1;const IMPLEMENTATIONS=["2.1.2","baseline","new"];const COLORS={"2.1.2":{figure:"hsl(118,50%,85%)",text:"hsl(118,50%,73%)"},baseline:{figure:"hsl(28,90%,61%)",text:"hsl(28,90%,49%)"},new:{figure:"hsl(213,90%,61%)",text:"hsl(213,90%,49%)"},axis:"#282828",bg:"#fff"};const UNITS={k:1e3,M:1e3**2};const SCALES_OPTIONS={x:{time:false},y:{distr:1,range:(u,min,max)=>uPlot.rangeNum(0,max,u.scales.y.paddingTopRatio,true),paddingTopRatio:.02,unit:{label:"kB",fractionDigits:{axis:{max:2},legend:3}}}};const AXIS_OPTIONS={font:"12px Chart-Normal",labelFont:"13px Chart-Normal",grid:{stroke:COLORS.axis,width:AXIS_WIDTH},ticks:{stroke:COLORS.axis,width:AXIS_WIDTH,size:5},stroke:COLORS.axis,gap:3};const X_AXIS_OPTIONS={...AXIS_OPTIONS,label:"iv_tbl size",size:24,labelSize:14,splits:(u,axisIdx,scaleMin,scaleMax,foundIncr,foundSpace,forceMin)=>{scaleMin=Math.ceil(scaleMin);scaleMax=Math.floor(scaleMax);foundIncr=Math.ceil(foundIncr);const splits=[];for(let v=scaleMin;v<=scaleMax;v+=foundIncr)splits.push(v);return splits}};const Y_AXIS_OPTIONS={...AXIS_OPTIONS,label:"Memory Usage (kB)",size:33,labelSize:22,values:(u,splits,axisIdx,foundSpace,foundIncr)=>{return splits.map(v=>v&&unitize(u.scales.y.unit,"axis",v))}};const X_SERIES_OPTIONS={label:"iv_tbl size"};const Y_SERIES_OPTIONS=IMPLEMENTATIONS.map(impl=>{return{stroke:COLORS[impl].figure,width:Y_LINE_WIDTH,points:{show:false},alpha:1}});const AXES_WITHOUT_GRID_PLUGIN={opts:(u,options)=>{options.axes.forEach(axis=>axis.grid.show=false)},hooks:{drawAxes:drawAxes}};const CURSOR_PLUGIN={opts:(u,options)=>{options.cursor.show=true;options.cursor.x=false;options.cursor.y=true},hooks:{init:cursorInit,setCursor:cursorSetCursor}};const MEMORY_USAGE_CHART_OPTIONS={class:"line",width:550,height:270,cursor:{points:{show:false},drag:{x:true}},gutters:{y:12},legend:{show:false},scales:SCALES_OPTIONS,axes:[X_AXIS_OPTIONS,Y_AXIS_OPTIONS],series:[X_SERIES_OPTIONS,...Y_SERIES_OPTIONS],plugins:[CURSOR_PLUGIN,AXES_WITHOUT_GRID_PLUGIN]};const PERFORMANCE_LINEAR_SCALE_LINE_CHART_OPTIONS=(()=>{const opts=uPlot.assign({},MEMORY_USAGE_CHART_OPTIONS);opts.scales.y.unit.label="M i/s";opts.scales.y.unit.fractionDigits.legend=5;opts.axes[1].label="Performance (M i/s)";return opts})();const PERFORMANCE_LOG_SCALE_LINE_CHART_OPTIONS=(()=>{const opts=uPlot.assign({},PERFORMANCE_LINEAR_SCALE_LINE_CHART_OPTIONS);opts.scales.y.distr=3;opts.scales.y.range=null;return opts})();const CHART_FUNCTIONS={"memory-usage":(mode,cb)=>{drawLineChart("memory-usage",null,mode,MEMORY_USAGE_CHART_OPTIONS,cb)},"performance-c-get":(mode,cb)=>{drawLineChart("performance","c-get",mode,PERFORMANCE_LINEAR_SCALE_LINE_CHART_OPTIONS,cb)},"performance-c-set":drawPeformanceCSetChart};function joinWithoutNull(ary,separator){return ary.filter(el=>el!=null).join(separator)}function cds(num,{fractionDigits:fractionDigits={}}){let min,max;if(typeof fractionDigits==="number"){min=max=fractionDigits}else{({min:min,max:max}=fractionDigits)}return num.toLocaleString(undefined,{minimumFractionDigits:min,maximumFractionDigits:max})}function unitize(unit,type,v){const opts={fractionDigits:unit.fractionDigits[type]};return cds(v/UNITS[unit.label[0]],opts)}function uPlotContainers(id){return document.querySelectorAll(`#${id} > .chart-item > .chart`)}function drawAxes(u){function drawGridLine(ctx,grid,x1,y1,x2,y2){ctx.strokeStyle=grid.stroke;ctx.lineWidth=grid.width*devicePixelRatio;ctx.beginPath();ctx.moveTo(x1,y1);ctx.lineTo(x2,y2);ctx.stroke()}const[b,xAxis,yAxis]=[u.bbox,...u.axes];const xAxisY=xAxis._pos*devicePixelRatio;const yAxisX=b.left;drawGridLine(u.ctx,xAxis.grid,yAxisX,xAxisY,b.left+b.width,xAxisY);drawGridLine(u.ctx,yAxis.grid,yAxisX,xAxisY,yAxisX,b.top)}function cursorInit(u,options,data){function initLine(u){const el=u.cursor.els.x=document.createElement("div");el.classList.add("u-cursor-x");u.root.querySelector(".u-over").appendChild(el)}function initLegend(u){const els=u.cursor.els.legend={};const legendEl=u.root.parentNode.parentNode.lastChild;const groupEl=legendEl.lastChild.firstChild;els.header=legendEl.firstChild;els.values=Array.from(groupEl.getElementsByClassName("legend-value"))}u.cursor.els={};initLine(u);initLegend(u)}function cursorSetCursor(u){function disableLine(u){u.cursor.els.x.classList.add("u-off")}function disableLegend(u){const els=u.cursor.els.legend;els.header.textContent=`${u.axes[0].label}: --`;for(let el of els.values)el.textContent="--"}function updateLine(u,idx){const el=u.cursor.els.x;const pos=Math.floor(u.valToPos(u.data[0][idx],"x"));el.style.transform="translateX("+pos+"px)";el.classList.remove("u-off")}function updateLegend(u,idx){const els=u.cursor.els.legend;els.header.textContent=`${u.axes[0].label}: ${u.data[0][idx]}`;els.values.forEach((node,i)=>{const unit=u.scales[u.series[i+1].scale].unit;node.textContent=unitize(unit,"legend",u.data[i+1][idx])})}const{idx:idx}=u.cursor;if(u.cursor.prevIdx===idx)return;if((u.cursor.prevIdx=idx)==null){disableLine(u,idx);disableLegend(u,idx)}else{updateLine(u,idx);updateLegend(u,idx)}}function plot(category,feature,options,data,cb){const id="chart-"+joinWithoutNull([category,feature],"-");for(let el of uPlotContainers(id)){if(el.firstChild!=null)continue;cb(new uPlot(options,data,el));break}}function drawChart(category,feature,mode,cb){const dataPath="/mruby-iv-benchmark/"+joinWithoutNull([category,feature,`${mode}.json`],"/");fetch(dataPath,{cache:"no-cache"}).then(res=>res.json()).then(data=>cb(data))}function drawLineChart(category,feature,mode,options,cb){drawChart(category,feature,mode,data=>{const opts=uPlot.assign({},options);opts.cursor.sync={key:joinWithoutNull([category,feature],"-")};plot(category,feature,opts,data,cb)})}function drawPeformanceCSetChart(mode,cb){drawChart("performance","c-set",mode,eachData=>{const xs=eachData[0];const totalData=new Array(eachData.length);const sums=new Array(eachData.length-1);totalData[0]=xs;for(let i=0;i<sums.length;i++){totalData[i+1]=new Array(xs.length);sums[i]=0}for(let seriesIdx=1;seriesIdx<=sums.length;seriesIdx++){for(let idx=0;idx<xs.length;idx++){const sum=sums[seriesIdx-1]+=1/eachData[seriesIdx][idx];totalData[seriesIdx][idx]=1/sum}}const eachOpts=uPlot.assign({},PERFORMANCE_LOG_SCALE_LINE_CHART_OPTIONS);eachOpts.cursor.sync={key:"performance-c-set"};const totalOpts=uPlot.assign({},eachOpts);eachOpts.axes[1].label="Each "+eachOpts.axes[1].label;totalOpts.axes[1].label="Total "+totalOpts.axes[1].label;plot("performance","c-set",eachOpts,eachData,cb);plot("performance","c-set",totalOpts,totalData,cb)})}function modesOnClick(evt){function syncAlpha(u,uPlotIdx,activeModeEl){if(activeModeEl==null)return;let redraw=false;for(let seriesIdx=1;seriesIdx<=IMPLEMENTATIONS.length;seriesIdx++){const alpha=activeModeEl.uPlots[uPlotIdx].series[seriesIdx].alpha;if(u.series[seriesIdx].alpha===alpha)continue;u.series[seriesIdx].alpha=alpha;redraw=true}if(redraw)u.redraw()}const[modesEl,currentModeEl]=[this,evt.target];const activeModeEl=modesEl.getElementsByClassName("active")[0];if(activeModeEl!=null){activeModeEl.classList.remove("active");activeModeEl.uPlots.forEach(u=>u.root.parentNode.removeChild(u.root))}currentModeEl.classList.add("active");if(currentModeEl.uPlots==null){const key=modesEl.parentNode.id.replace(/^chart-/,"");const uPlots=currentModeEl.uPlots=[];CHART_FUNCTIONS[key](currentModeEl.dataset.mode,u=>{uPlots.push(u);syncAlpha(u,uPlots.length-1,activeModeEl)})}else{const chartEls=uPlotContainers(modesEl.parentNode.id);currentModeEl.uPlots.forEach((u,i)=>{chartEls[i].appendChild(u.root);syncAlpha(u,i,activeModeEl)})}}function legendItemsOnClick(evt){const itemsEl=this;const currentItemEl=evt.target.closest(".legend-item");const lineChartEl=itemsEl.closest(".line-chart");const i=Array.prototype.indexOf.call(itemsEl.childNodes,currentItemEl);const uPlots=lineChartEl.querySelector(".modes > .active").uPlots;for(let u of uPlots){const series=u.series[i+1];series.alpha^=1;u.redraw()}currentItemEl.classList.toggle("hidden")}window.addEventListener("DOMContentLoaded",evt=>{for(let el of document.getElementsByClassName("modes")){el.addEventListener("click",modesOnClick);el.firstChild.click()}const css=".line-chart .legend-items:first-child";for(let el of document.querySelectorAll(css)){el.addEventListener("click",legendItemsOnClick)}})})();
